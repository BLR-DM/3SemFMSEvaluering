@page "/forum/{forumId}/post/{postId}"
@using System.Security.Claims
@using FMSEvalueringUI.ExternalServices.Interfaces
@using FMSEvalueringUI.ModelDto.FMSEvaluering.CommandDto.CommentDto
@using FMSEvalueringUI.ModelDto.FMSEvaluering.CommandDto.PostDto
@using FMSEvalueringUI.ModelDto.FMSEvaluering.CommandDto.VoteDto
@using FMSEvalueringUI.ModelDto.FMSEvaluering.QueryDto
@using FMSEvalueringUI.Services
@inject IEvalueringProxy _evalueringProxy
@inject IAuthService _authService

@if (post == null)
{
    <p><em>Loading ...</em></p>
}
else
{
    <h1>@forum.Name</h1>
    @if (IsUserSameAsCreator)
    {
        <button @onclick="EnableUpdate">Update Post</button>
    }

    <div class="container d-flex justify-content-center">
        <div class="card mb-4" style="width: 700px;">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <small class="text-muted">@post.CreatedDate</small>
                </div>
                @if(!UpdateEnabled)
                {
                    <small class="text-muted">Feedback:</small>
                    <div class="card mb-4 justify-content-center" style="width: 625px;">
                        <h5 class="card-title" style="padding-left: 10px; padding-right: 10px; padding-top: 10px;">
                            @post.Description
                        </h5>
                    </div>
                    <small class="text-muted">Solution:</small>
                    <div class="card mb-4 justify-content-center" style="width: 625px;">
                        <h5 class="card-title" style="padding-left: 10px; padding-right: 10px; padding-top: 10px;">
                            @post.Solution
                        </h5>
                    </div>
                    @if (ShowStudentButtons)
                    {
                        <div class="d-flex gap-2 mb-2">
                            <button class="btn btn-outline-success btn-sm" @onclick="@(() => HandleVote(@post.Id, true))">
                                UpVote
                            </button>
                            <button class="btn btn-outline-danger btn-sm" @onclick="@(() => HandleVote(@post.Id, false))">
                                DownVote
                            </button>
                        </div>
                    }
                    <p class="card-text">
                        <span>Up: @post.UpVotes | Down: @post.DownVotes</span>
                        <br/>
                        <small class="text-muted">Comments: @post.Comments.Count()</small>
                        <br/>
                        <button @onclick="Edits">Edits</button>
                        @if (ShowEdits)
                        {
                            foreach (var postHistory in post.History)
                            {
                                <li class="edits">
                                    @postHistory.EditedDate
                                    <p>@postHistory.Description</p>
                                    <p>@postHistory.Solution</p>
                                </li>
                            }
                        }
                    </p>
                }
                @if (UpdateEnabled)
                {
                    <EditForm Model="UpdatePostDto" OnSubmit="UpdatePost" id="UpdatePostForm" FormName="UpdatePostForm">
                        <InputText @bind-Value="UpdatePostDto.Description" type="description" placeholder="@post.Description"></InputText>
                        <InputText @bind-Value="UpdatePostDto.Solution" type="solution" placeholder="@post.Solution"></InputText>
                        <button type="submit">Save</button>
                    </EditForm>
                }
            </div>
        </div>
    </div>

    <h3>Comments:</h3>
    @foreach (var comment in post.Comments)
    {
        <li class="comments">
            @comment.CreatedDate
            <p>@comment.FirstName @comment.LastName</p>
            @if(UpdateCommentId != comment.Id)
            {
                <p>@comment.Text</p>
            }
        </li>

        @if (IsUserSameAsCreaterComment(comment))
        {
            @if (UpdateCommentId == comment.Id)
            {
                <EditForm Model="UpdateCommentDto" OnSubmit="@(() => UpdateComment(comment.Id))" id="UpdateCommentDto" FormName="UpdateCommentDto">
                    <InputText @bind-Value="UpdateCommentDto.Text" type="comment" placeholder="@comment.Text"></InputText>
                    <button type="submit">Save</button>
                </EditForm>
            }
            <button @onclick="@(() => EnableUpdateComment(comment))">Update Comment</button>
        }
    }

    if (ShowStudentButtons)
    {
        <EditForm Model="CreateCommentDto" OnSubmit="CreateAComment" id="CreateCommentForm" FormName="CreateCommentForm">
            <InputText @bind-Value="CreateCommentDto.Text" type="comment" placeholder="Comment"></InputText>
            <button type="submit">Add Comment</button>
        </EditForm>
    }
}

@code {
    [Parameter]
    public string? forumId { get; set; }
    [Parameter]
    public string? postId { get; set; }

    private ForumDto? forum { get; set; } = new();

    private PostDto? post;

    private CreateCommentDto CreateCommentDto { get; set; } = new();
    private UpdateCommentDto UpdateCommentDto { get; set; } 
    private UpdatePostDto UpdatePostDto { get; set; }

    private bool UpdateEnabled { get; set; }
    private bool IsUserSameAsCreator { get; set; }
    private ClaimsPrincipal claimsPrincipal { get; set; }
    private int? UpdateCommentId { get; set; }
    private bool ShowEdits { get; set; }
    private bool ShowStudentButtons { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var claims = await _authService.GetClaimsAsync();
        ShowStudentButtons = claims.FindFirstValue("usertype") == "student";
        await LoadPostDataAsync();
        await IsUserSameAsCreater();
        claimsPrincipal = await _authService.GetClaimsAsync();
    }

    private async Task LoadPostDataAsync()
    {
        await Task.Delay(500);

        forum = await GetPost(forumId, postId);
        post = forum.Posts.First();
    }

    public async Task<ForumDto> GetPost(string forumId, string postId)
    {
        var result = await _evalueringProxy.GetPostAsync(forumId, postId);
        return result;
    }

    private async Task IsUserSameAsCreater()
    {
        var claims = await _authService.GetClaimsAsync();
        var userId = claims.FindFirst("sub").Value;
        var postCreatorId = post.AppUserId;

        IsUserSameAsCreator = userId == postCreatorId;
    }

    private bool IsUserSameAsCreaterComment(CommentDto comment)
    {
        var userId = claimsPrincipal.FindFirst("sub").Value;
        var commentCreatorId = comment.AppUserId;
        
        return userId == commentCreatorId;
    }

    private async Task CreateAComment()
    {
        await _evalueringProxy.CreateComment(forumId, postId, CreateCommentDto);
        await LoadPostDataAsync();
    }

    private void EnableUpdate()
    {
        if (UpdateEnabled)
        {
            UpdateEnabled = false;
        }
        else
        {
            UpdateEnabled = true;

            UpdatePostDto = new UpdatePostDto
            {
                Description = post.Description,
                Solution = post.Solution,
                RowVersion = post.RowVersion
            };
        }
    }

    private void EnableUpdateComment(CommentDto comment)
    {
        if (!IsUserSameAsCreaterComment(comment))
        {
            return;
        }

        if (UpdateCommentId == comment.Id)
        {
            UpdateCommentId = null;
        }
        else
        {
            UpdateCommentId = comment.Id;

            UpdateCommentDto = new UpdateCommentDto
            {
                Text = comment.Text,
                RowVersion = comment.RowVersion
            };
        }
    }


    private async Task UpdatePost()
    {
        await _evalueringProxy.UpdatePost(forumId, postId, UpdatePostDto);
        UpdateEnabled = false;
        await LoadPostDataAsync();
    }
    
    private async Task UpdateComment(int commentId)
    {
        await _evalueringProxy.UpdateComment(forumId, postId, commentId.ToString(), UpdateCommentDto);
        UpdateCommentId = null;
        await LoadPostDataAsync();
    }            

    private void Edits()
    {
        ShowEdits = !ShowEdits;
    }

    private async Task HandleVote(string postId, bool voteType)
    {
        var claims = await _authService.GetClaimsAsync();

        var appUserId = claims.FindFirstValue("sub");

        var vote = post.Votes.SingleOrDefault(v => v.AppUserId == appUserId);

        if (vote == null)
        {
            await _evalueringProxy.HandleVote(forum.Id.ToString(), postId, new HandleVoteDto { VoteType = voteType });
        }
        else
        {
            await _evalueringProxy.HandleVote(forum.Id.ToString(), postId, new HandleVoteDto { VoteType = voteType, RowVersion = vote.RowVersion });
        }

        await LoadPostDataAsync();
    }
}