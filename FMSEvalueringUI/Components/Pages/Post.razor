@page "/forum/{forumId}/post/{postId}"
@using System.Security.Claims
@using FMSEvalueringUI.ExternalServices.Interfaces
@using FMSEvalueringUI.ModelDto.FMSEvaluering.CommandDto.CommentDto
@using FMSEvalueringUI.ModelDto.FMSEvaluering.CommandDto.PostDto
@using FMSEvalueringUI.ModelDto.FMSEvaluering.CommandDto.VoteDto
@using FMSEvalueringUI.ModelDto.FMSEvaluering.QueryDto
@using FMSEvalueringUI.Services
@inject IEvalueringProxy _evalueringProxy
@inject IAuthService _authService

@if (post == null)
{
    <p><em>Loading ...</em></p>
}
else
{
    <h1>@forum.Name</h1>
    @if (IsUserSameAsCreator)
    {
        <button @onclick="EnableUpdate">Update Post</button>
    }

    <p>@post.CreatedDate</p>
    @if(!UpdateEnabled)
    {
        <p>@post.Description</p>
        <p>@post.Solution</p>
        <span>UpVotes: @post.UpVotes</span>
        @if (ShowStudentButtons)
        {
            <button @onclick="@(() => HandleVote(@post.Id, true))">UpVote</button>
        }
        <span>DownVotes: @post.DownVotes</span>
        @if (ShowStudentButtons)
        {
            <button @onclick="@(() => HandleVote(@post.Id,false))">DownVote</button>
        }
        <br/>
        <button @onclick="Edits">Edits</button>
        @if (ShowEdits)
        {
            foreach (var postHistory in post.History)
            {
                <li class="edits">
                    @postHistory.EditedDate
                    <p>@postHistory.Description</p>
                    <p>@postHistory.Solution</p>
                </li>
            }
        }
    }

    @if (UpdateEnabled)
    {
        <EditForm Model="UpdatePostDto" OnSubmit="UpdatePost" id="UpdatePostForm" FormName="UpdatePostForm">
            <InputText @bind-Value="UpdatePostDto.Description" type="description" placeholder="@post.Description"></InputText>
            <InputText @bind-Value="UpdatePostDto.Solution" type="solution" placeholder="@post.Solution"></InputText>
            <button type="submit">Update Post</button>
        </EditForm>
    }

    <h3>Comments:</h3>
    @foreach (var comment in post.Comments)
    {
        <li class="comments">
            @comment.CreatedDate
            <p>@comment.FirstName @comment.LastName</p>
            <p>@comment.Text</p>
        </li>

    }

    <EditForm Model="CreateCommentDto" OnSubmit="CreateAComment" id="CreateCommentForm" FormName="CreateCommentForm">
        <InputText @bind-Value="CreateCommentDto.Text" type="comment" placeholder="Comment"></InputText>
        <button type="submit">Add Comment</button>
    </EditForm>

}

@code {
    [Parameter]
    public string? forumId { get; set; }
    [Parameter]
    public string? postId { get; set; }

    private ForumDto? forum { get; set; } = new();

    private PostDto? post;

    private CreateCommentDto CreateCommentDto { get; set; } = new CreateCommentDto();
    private UpdatePostDto UpdatePostDto { get; set; }

    private bool UpdateEnabled { get; set; } = false;
    private bool IsUserSameAsCreator { get; set; } = false;
    private bool ShowEdits { get; set; } = false;
    private bool ShowStudentButtons { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var claims = await _authService.GetClaimsAsync();
        ShowStudentButtons = claims.FindFirstValue("usertype") == "student";
        await LoadPostDataAsync();
        await IsUserSameAsCreater();
    }

    private async Task LoadPostDataAsync()
    {
        await Task.Delay(500);

        forum = await GetPost(forumId, postId);
        post = forum.Posts.First();
    }

    public async Task<ForumDto> GetPost(string forumId, string postId)
    {
        var result = await _evalueringProxy.GetPostAsync(forumId, postId);
        return result;
    }

    private async Task IsUserSameAsCreater()
    {
        var claims = await _authService.GetClaimsAsync();
        var userId = claims.FindFirst("sub").Value;
        var postCreatorId = post.AppUserId;
        if (userId == postCreatorId)
        {
            IsUserSameAsCreator = true;
        }
    }

    private async Task CreateAComment()
    {
        await _evalueringProxy.CreateComment(forumId, postId, CreateCommentDto);
        await LoadPostDataAsync();
    }

    private void EnableUpdate()
    {
        if (UpdateEnabled)
        {
            UpdateEnabled = false;
        }
        else
        {
            UpdateEnabled = true;

            UpdatePostDto = new UpdatePostDto
            {
                Description = post.Description,
                Solution = post.Solution,
                RowVersion = post.RowVersion
            };
        }
    }

    private async Task UpdatePost()
    {
        await _evalueringProxy.UpdatePost(forumId, postId, UpdatePostDto);
        UpdateEnabled = false;
        await LoadPostDataAsync();
    }

    private void Edits()
    {
        ShowEdits = !ShowEdits;
    }

    private async Task HandleVote(string postId, bool voteType)
    {
        var claims = await _authService.GetClaimsAsync();

        var appUserId = claims.FindFirstValue("sub");

        var vote = post.Votes.SingleOrDefault(v => v.AppUserId == appUserId);

        if (vote == null)
        {
            await _evalueringProxy.HandleVote(forum.Id.ToString(), postId, new HandleVoteDto { VoteType = voteType });
        }
        else
        {
            await _evalueringProxy.HandleVote(forum.Id.ToString(), postId, new HandleVoteDto { VoteType = voteType, RowVersion = vote.RowVersion });
        }
        await LoadPostDataAsync();
    }
}