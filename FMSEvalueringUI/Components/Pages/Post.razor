@page "/forum/{forumId}/post/{postId}"
@using FMSEvalueringUI.ExternalServices.Interfaces
@using FMSEvalueringUI.ModelDto.FMSEvaluering.CommandDto.CommentDto
@using FMSEvalueringUI.ModelDto.FMSEvaluering.CommandDto.PostDto
@using FMSEvalueringUI.ModelDto.FMSEvaluering.QueryDto
@using FMSEvalueringUI.Services
@using System.Security.Claims
@inject IEvalueringProxy _evalueringProxy
@inject IAuthService _authService

@if (post == null)
{
    <p><em>Loading ...</em></p>
}
else
{
    <h1>@forum.Name</h1>
    @if (IsUserSameAsCreator)
    {
        <button @onclick="EnableUpdate">Update Post</button>
    }

    <p>@post.CreatedDate</p>
    @if(!UpdateEnabled)
    {
        <p>@post.Description</p>
        <p>@post.Solution</p>
    }
    @if (UpdateEnabled)
    {
        <EditForm Model="UpdatePostDto" OnSubmit="UpdatePost" id="UpdatePostForm" FormName="UpdatePostForm">
            <InputText @bind-Value="UpdatePostDto.Description" type="description" placeholder="@post.Description"></InputText>
            <InputText @bind-Value="UpdatePostDto.Solution" type="solution" placeholder="@post.Solution"></InputText>
            <button type="submit">Save</button>
        </EditForm>
    }

    <h3>Comments:</h3>
    @foreach (var comment in post.Comments)
    {
        <li class="comments">
            <p>@comment.CreatedDate</p>
            <p>@comment.FirstName @comment.LastName</p>
            @if(UpdateCommentId != comment.Id)
            {
                <p>@comment.Text</p>
            }
        </li>

        @if (IsUserSameAsCreaterComment(comment))
        {
            
            @if (UpdateCommentId == comment.Id)
            {
                <EditForm Model="UpdateCommentDto" OnSubmit="@(() => UpdateComment(comment.Id))" id="UpdateCommentDto" FormName="UpdateCommentDto">
                    <InputText @bind-Value="UpdateCommentDto.Text" type="comment" placeholder="@comment.Text"></InputText>
                    <button type="submit">Save</button>
                </EditForm>
            }

            <button @onclick="@(() => EnableUpdateComment(comment))">Update Comment</button>

        }
    }

    <EditForm Model="CreateCommentDto" OnSubmit="CreateAComment" id="CreateCommentForm" FormName="CreateCommentForm">
        <InputText @bind-Value="CreateCommentDto.Text" type="comment" placeholder="Comment"></InputText>
        <button type="submit">Add Comment</button>
    </EditForm>

}

@code {
    [Parameter]
    public string? forumId { get; set; }
    [Parameter]
    public string? postId { get; set; }

    private ForumDto? forum { get; set; } = new();

    private PostDto? post;

    private CreateCommentDto CreateCommentDto { get; set; } = new CreateCommentDto();
    private UpdateCommentDto UpdateCommentDto { get; set; } 
    private UpdatePostDto UpdatePostDto { get; set; }

    private bool UpdateEnabled { get; set; } = false;
    private bool IsUserSameAsCreator { get; set; } = false;
    private bool UpdateCommentEnabled { get; set; } = false;
    private bool IsUserSameAsCreatorComment { get; set; } = false;
    private ClaimsPrincipal claimsPrincipal { get; set; }
    private int? UpdateCommentId { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await LoadPostDataAsync();
        await IsUserSameAsCreater();
        claimsPrincipal = await _authService.GetClaimsAsync();
    }

    private async Task LoadPostDataAsync()
    {
        await Task.Delay(500);

        forum = await GetPost(forumId, postId);
        post = forum.Posts.First();
    }

    public async Task<ForumDto> GetPost(string forumId, string postId)
    {
        var result = await _evalueringProxy.GetPostAsync(forumId, postId);
        return result;
    }

    private async Task IsUserSameAsCreater()
    {
        var claims = await _authService.GetClaimsAsync();
        var userId = claims.FindFirst("sub").Value;
        var postCreatorId = post.AppUserId;
        if (userId == postCreatorId)
        {
            IsUserSameAsCreator = true;
        }
    }

    private bool IsUserSameAsCreaterComment(CommentDto comment)
    {
        var userId = claimsPrincipal.FindFirst("sub").Value;
        var commentCreatorId = comment.AppUserId;
        if (userId == commentCreatorId)
        {
            return true;
        }
        else
            return false;
    }

    private async Task CreateAComment()
    {
        await _evalueringProxy.CreateComment(forumId, postId, CreateCommentDto);
        await LoadPostDataAsync();
    }

    private void EnableUpdate()
    {
        if (UpdateEnabled is true)
        {
            UpdateEnabled = false;
        }
        else
        {
            UpdateEnabled = true;

            UpdatePostDto = new UpdatePostDto
                {
                    Description = post.Description,
                    Solution = post.Solution,
                    RowVersion = post.RowVersion
                };
        }
    }

    private void EnableUpdateComment(CommentDto comment)
    {
        if (!IsUserSameAsCreaterComment(comment))
        {
            return;
        }

        if (UpdateCommentId == comment.Id)
        {
            UpdateCommentId = null;
        }
        else
        {
            UpdateCommentId = comment.Id;

            UpdateCommentDto = new UpdateCommentDto
                {
                    Text = comment.Text,
                    RowVersion = comment.RowVersion
                };
        }
    }


    private async Task UpdatePost()
    {
        await _evalueringProxy.UpdatePost(forumId, postId, UpdatePostDto);
        UpdateEnabled = false;
        await LoadPostDataAsync();
    }

    private async Task UpdateComment(int id)
    {
        await _evalueringProxy.UpdateComment(forumId, postId, id.ToString(), UpdateCommentDto);
        UpdateCommentId = null;
        await LoadPostDataAsync();
    }
}