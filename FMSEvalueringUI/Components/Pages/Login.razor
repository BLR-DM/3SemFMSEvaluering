@page "/login"
@using System.Security.Claims
@using FMSEvalueringUI.Services
@inject IAuthService _authService

<h3>Login</h3>

@if (!string.IsNullOrEmpty(Token))
{
    <p>Logged in as: @user</p>

    <button class="btn btn-outline-danger" @onclick="Logout">Logout</button>

    <div>Test token: @Token</div>
}
else
{
    <EditForm Model="LoginDto" OnSubmit="Login12" id="LoginForm" FormName="LoginForm">
        <InputText @bind-Value="LoginDto.Email" type="email" placeholder="Email"></InputText>
        <InputText @bind-Value="LoginDto.Password" type="password" placeholder="Password"></InputText>
        <button type="submit">Login</button>
    </EditForm>
}


@code {
    [SupplyParameterFromForm]
    private LoginDto LoginDto { get; set; } = new();

    private string? Token { get; set; }
    private string? user { get; set; }

    public async Task Login12()
    {
        if (LoginDto is not null)
        {
            try
            {
                await _authService.LoginAsync(LoginDto);
                var test = await _authService.GetJwtTokenAsync();
                Token = test;

                var claims = await _authService.GetClaimsAsync();
                var userFullName =
                    $"{claims.FindFirstValue("given_name")} " +
                    $"{claims.FindFirstValue("family_name")}";

                user = userFullName;
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
            //Token = tokenResponse?.Token ?? "Invalid response.";
        }
        else
        {
            //Token = "Form data is null.";
        }
    }

    private async Task Logout()
    {
        await _authService.LogoutAsync();
        Token = null;
        user = null;
    }

}