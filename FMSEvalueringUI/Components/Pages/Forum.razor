@page "/forum/{id}/posts"
@using FMSEvalueringUI.ExternalServices.Interfaces
@using FMSEvalueringUI.ModelDto.FMSEvaluering.QueryDto
@inject IEvalueringProxy _evalueringProxy

<PageTitle>Forum</PageTitle>

<h1>Forum Id: @Id</h1>

@if (posts == null)
{
    <p><em>Loading ...</em></p>
}
else
{
    <h3>@ForumDto.Name</h3>
    @foreach (var post in posts)
    {
        <li class="posts">
            @post.CreatedDate
            <NavLink class="nav-link" href="@($"/forum/{Id}/post/{post.Id}")">
                @post.Description
            </NavLink>
            <p>@post.Solution</p>
            <p>UpVotes: @post.UpVotes</p>
            <p>DownVotes: @post.DownVotes</p>
            <p>Comments: @post.Comments.Count()</p>
        </li>
    }
}


@code {
    [Parameter]
    public string? Id { get; set; } // Must match 'id' in the route

    public ForumDto? ForumDto { get; set; } = new();

    private PostDto[]? posts;

    protected override async Task OnInitializedAsync()
    {
        await LoadForumDataAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadForumDataAsync();
    }

    private async Task LoadForumDataAsync()
    {
        await Task.Delay(500);

        ForumDto = await GetPosts(Id);
        posts = ForumDto.Posts.ToArray();
    }

    public async Task<ForumDto> GetPosts(string forumId)
    {
        var result = await _evalueringProxy.GetPostsAsync(forumId);
        return result;
    }
}