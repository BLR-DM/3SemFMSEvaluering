@page "/forum/{id}/posts"
@using System.Security.Claims
@using FMSEvalueringUI.ExternalServices.Interfaces
@using FMSEvalueringUI.ModelDto.FMSEvaluering.CommandDto.VoteDto
@using FMSEvalueringUI.ModelDto.FMSEvaluering.QueryDto
@using FMSEvalueringUI.Services
@inject IEvalueringProxy _evalueringProxy
@inject IAuthService _authService

<PageTitle>Forum</PageTitle>

@if (posts == null)
{
    <p><em>Loading ...</em></p>
}
else
{
    <h3>@forumDto.Name</h3>
    @if (ShowStudentButtons)
    {
        <NavLink class="btn btn-primary" href="@($"/forum/{Id}/post")">
            Create Post
        </NavLink>
    }
    @foreach (var post in posts)
    {
        <div class="container d-flex justify-content-center">
            <div class="card mb-4" style="width: 700px;">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <small class="text-muted">@post.CreatedDate</small>
                    </div>
                    <NavLink class="nav-link text-body" href="@($"/forum/{Id}/post/{post.Id}")">
                        <small class="text-muted">Feedback:</small>
                        <div class="card mb-4 justify-content-center" style="width: 625px;">
                            <h5 class="card-title" style="padding-left: 10px; padding-right: 10px; padding-top: 10px;">
                                @post.Description
                            </h5>
                        </div>
                        <small class="text-muted">Solution:</small>
                        <div class="card mb-4 justify-content-center" style="width: 625px;">
                            <h5 class="card-title" style="padding-left: 10px; padding-right: 10px; padding-top: 10px;">
                                @post.Solution
                            </h5>
                        </div>
                    </NavLink>
                    @if (ShowStudentButtons)
                    {
                        <div class="d-flex gap-2 mb-2">
                            <button class="btn btn-outline-success btn-sm" @onclick="@(() => HandleVote(@post.Id, true))">
                                UpVote
                            </button>
                            <button class="btn btn-outline-danger btn-sm" @onclick="@(() => HandleVote(@post.Id, false))">
                                DownVote
                            </button>
                        </div>
                    }
                    <p class="card-text">
                        <span>Up: @post.UpVotes | Down: @post.DownVotes</span>
                        <br/>
                        <small class="text-muted">Comments: @post.Comments.Count()</small>
                    </p>
                </div>
            </div>
        </div>
    }
}


@code {
    [Parameter]
    public string? Id { get; set; }

    private ForumDto? forumDto { get; set; } = new();

    private PostDto[]? posts;

    private bool ShowStudentButtons { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var claims = await _authService.GetClaimsAsync();
        ShowStudentButtons = claims.FindFirstValue("usertype") == "student";

        await LoadForumDataAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadForumDataAsync();
    }

    private async Task LoadForumDataAsync()
    {
        await Task.Delay(500); // loading text

        if (Id != null) forumDto = await GetPosts(Id);
        posts = forumDto?.Posts.ToArray();
    }

    private async Task<ForumDto> GetPosts(string forumId)
    {
        if (ShowStudentButtons)
        {
            return await _evalueringProxy.GetPostsAsync(forumId);
        }
        else
        {
            return await _evalueringProxy.GetPostsTeacherAsync(forumId);
        }
        
    }

    private async Task HandleVote(string postId, bool voteType)
    {
        var claims = await _authService.GetClaimsAsync();

        var appUserId = claims.FindFirstValue("sub");

        if (posts != null)
        {
            var vote = posts.Single(p => p.Id == postId)
                .Votes.SingleOrDefault(v => v.AppUserId == appUserId);

            if (vote == null)
            {
                await _evalueringProxy.HandleVote(Id, postId, new HandleVoteDto { VoteType = voteType });
            }
            else
            {
                await _evalueringProxy.HandleVote(Id, postId, new HandleVoteDto { VoteType = voteType, RowVersion = vote.RowVersion });
            }
            await LoadForumDataAsync();
        }
    }
}