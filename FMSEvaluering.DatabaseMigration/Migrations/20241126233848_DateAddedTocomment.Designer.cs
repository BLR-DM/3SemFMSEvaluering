// <auto-generated />
using System;
using FMSEvaluering.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FMSEvaluering.DatabaseMigration.Migrations
{
    [DbContext(typeof(EvaluationContext))]
    [Migration("20241126233848_DateAddedTocomment")]
    partial class DateAddedTocomment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FMSEvaluering.Domain.Entities.ForumEntities.Forum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Forums");

                    b.HasDiscriminator().HasValue("Forum");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FMSEvaluering.Domain.Entities.PostEntities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("FMSEvaluering.Domain.Entities.PostEntities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ForumId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Solution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ForumId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("FMSEvaluering.Domain.Entities.PostEntities.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool>("VoteType")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("FMSEvaluering.Domain.Entities.ForumEntities.ClassForum", b =>
                {
                    b.HasBaseType("FMSEvaluering.Domain.Entities.ForumEntities.Forum");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ClassForum");
                });

            modelBuilder.Entity("FMSEvaluering.Domain.Entities.ForumEntities.PublicForum", b =>
                {
                    b.HasBaseType("FMSEvaluering.Domain.Entities.ForumEntities.Forum");

                    b.HasDiscriminator().HasValue("PublicForum");
                });

            modelBuilder.Entity("FMSEvaluering.Domain.Entities.ForumEntities.SubjectForum", b =>
                {
                    b.HasBaseType("FMSEvaluering.Domain.Entities.ForumEntities.Forum");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("SubjectForum");
                });

            modelBuilder.Entity("FMSEvaluering.Domain.Entities.PostEntities.Comment", b =>
                {
                    b.HasOne("FMSEvaluering.Domain.Entities.PostEntities.Post", null)
                        .WithMany("Comments")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("FMSEvaluering.Domain.Entities.PostEntities.Post", b =>
                {
                    b.HasOne("FMSEvaluering.Domain.Entities.ForumEntities.Forum", "Forum")
                        .WithMany("Posts")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("FMSEvaluering.Domain.Values.PostHistory", "History", b1 =>
                        {
                            b1.Property<int>("PostId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("EditedDate")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PostId", "EditedDate");

                            b1.ToTable("PostHistory");

                            b1.WithOwner()
                                .HasForeignKey("PostId");
                        });

                    b.Navigation("Forum");

                    b.Navigation("History");
                });

            modelBuilder.Entity("FMSEvaluering.Domain.Entities.PostEntities.Vote", b =>
                {
                    b.HasOne("FMSEvaluering.Domain.Entities.PostEntities.Post", null)
                        .WithMany("Votes")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("FMSEvaluering.Domain.Entities.ForumEntities.Forum", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("FMSEvaluering.Domain.Entities.PostEntities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
